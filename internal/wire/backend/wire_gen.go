// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package backend

import (
	"github.com/maczikasz/go-runs/internal/server"
	"github.com/maczikasz/go-runs/internal/wire/backend/config"
)

// Injectors from wire.go:

func InitializeStartupContext() (*server.StartupContext, func(), error) {
	mongoConfig := config.ProvideMongoConfig()
	dataMongoDBClient, cleanup, err := config.ProvideDataMongoDBClient(mongoConfig)
	if err != nil {
		return nil, nil, err
	}
	runbookDataManager := config.ProvideRunbookDataManager(dataMongoDBClient)
	sessionManager := config.ProvideSessionManager(dataMongoDBClient)
	runbookStepsDataManager := config.ProvideRunbookStepsDataManager(dataMongoDBClient)
	gridfsConfig := config.ProvideGridfsConfig()
	gridfsMongoDBClient, cleanup2, err := config.ProvideGridfsMongoDBClient(gridfsConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	gridfsMarkdownHandlers, err := config.ProvideGridFsClient(gridfsMongoDBClient)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	mapRunbookMarkdownResolver := config.ProvideRunbookMarkdownResolver(gridfsMarkdownHandlers)
	runbookStepDetailsFinder := config.ProvideStepDetailsFinder(runbookStepsDataManager, mapRunbookMarkdownResolver)
	priorityRuleManager, err := config.ProvidePriorityRuleMatcher(dataMongoDBClient)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	runbookManager := config.ProvideRunbookManager(priorityRuleManager, runbookDataManager)
	defaultErrorManager := config.ProvideDefaultErrorManager(sessionManager, runbookManager)
	persistentRuleWriter := config.ProvidePersistentRuleWriter(dataMongoDBClient)
	persistentRuleReader := config.ProvidePersistentRuleReader(dataMongoDBClient)
	runbookStepDetailsWriter := config.ProvideStepDetailsWriter(runbookStepsDataManager, mapRunbookMarkdownResolver, runbookStepsDataManager)
	v := config.ProvideRuleReloaderFunction(priorityRuleManager, dataMongoDBClient)
	startupContext := config.ProvideStartupContext(runbookDataManager, sessionManager, runbookStepDetailsFinder, defaultErrorManager, persistentRuleWriter, persistentRuleReader, priorityRuleManager, runbookStepDetailsWriter, runbookDataManager, runbookDataManager, v)
	return startupContext, func() {
		cleanup2()
		cleanup()
	}, nil
}
