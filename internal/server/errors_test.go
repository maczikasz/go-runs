// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package server

import (
	"github.com/maczikasz/go-runs/internal/model"
	"sync"
)

// Ensure, that SessionFromErrorCreatorMock does implement SessionFromErrorCreator.
// If this is not the case, regenerate this file with moq.
var _ SessionFromErrorCreator = &SessionFromErrorCreatorMock{}

// SessionFromErrorCreatorMock is a mock implementation of SessionFromErrorCreator.
//
// 	func TestSomethingThatUsesSessionFromErrorCreator(t *testing.T) {
//
// 		// make and configure a mocked SessionFromErrorCreator
// 		mockedSessionFromErrorCreator := &SessionFromErrorCreatorMock{
// 			GetSessionForErrorFunc: func(e model.Error) (string, error) {
// 				panic("mock out the GetSessionForError method")
// 			},
// 		}
//
// 		// use mockedSessionFromErrorCreator in code that requires SessionFromErrorCreator
// 		// and then make assertions.
//
// 	}
type SessionFromErrorCreatorMock struct {
	// GetSessionForErrorFunc mocks the GetSessionForError method.
	GetSessionForErrorFunc func(e model.Error) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetSessionForError holds details about calls to the GetSessionForError method.
		GetSessionForError []struct {
			// E is the e argument value.
			E model.Error
		}
	}
	lockGetSessionForError sync.RWMutex
}

// GetSessionForError calls GetSessionForErrorFunc.
func (mock *SessionFromErrorCreatorMock) GetSessionForError(e model.Error) (string, error) {
	if mock.GetSessionForErrorFunc == nil {
		panic("SessionFromErrorCreatorMock.GetSessionForErrorFunc: method is nil but SessionFromErrorCreator.GetSessionForError was just called")
	}
	callInfo := struct {
		E model.Error
	}{
		E: e,
	}
	mock.lockGetSessionForError.Lock()
	mock.calls.GetSessionForError = append(mock.calls.GetSessionForError, callInfo)
	mock.lockGetSessionForError.Unlock()
	return mock.GetSessionForErrorFunc(e)
}

// GetSessionForErrorCalls gets all the calls that were made to GetSessionForError.
// Check the length with:
//     len(mockedSessionFromErrorCreator.GetSessionForErrorCalls())
func (mock *SessionFromErrorCreatorMock) GetSessionForErrorCalls() []struct {
	E model.Error
} {
	var calls []struct {
		E model.Error
	}
	mock.lockGetSessionForError.RLock()
	calls = mock.calls.GetSessionForError
	mock.lockGetSessionForError.RUnlock()
	return calls
}
