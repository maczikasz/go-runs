// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handlers

import (
	"github.com/maczikasz/go-runs/internal/model"
	"sync"
)

// RunbookStepDetailsFinderMock is a mock implementation of RunbookStepDetailsFinder.
//
// 	func TestSomethingThatUsesRunbookStepDetailsFinder(t *testing.T) {
//
// 		// make and configure a mocked RunbookStepDetailsFinder
// 		mockedRunbookStepDetailsFinder := &RunbookStepDetailsFinderMock{
// 			FindRunbookStepDetailsByIdFunc: func(id string) (model.RunbookStepData, *model.Markdown, error) {
// 				panic("mock out the FindRunbookStepDetailsById method")
// 			},
// 			ListAllStepsFunc: func() ([]model.RunbookStepData, error) {
// 				panic("mock out the ListAllSteps method")
// 			},
// 		}
//
// 		// use mockedRunbookStepDetailsFinder in code that requires RunbookStepDetailsFinder
// 		// and then make assertions.
//
// 	}
type RunbookStepDetailsFinderMock struct {
	// FindRunbookStepDetailsByIdFunc mocks the FindRunbookStepDetailsById method.
	FindRunbookStepDetailsByIdFunc func(id string) (model.RunbookStepData, *model.Markdown, error)

	// ListAllStepsFunc mocks the ListAllSteps method.
	ListAllStepsFunc func() ([]model.RunbookStepData, error)

	// calls tracks calls to the methods.
	calls struct {
		// FindRunbookStepDetailsById holds details about calls to the FindRunbookStepDetailsById method.
		FindRunbookStepDetailsById []struct {
			// ID is the id argument value.
			ID string
		}
		// ListAllSteps holds details about calls to the ListAllSteps method.
		ListAllSteps []struct {
		}
	}
	lockFindRunbookStepDetailsById sync.RWMutex
	lockListAllSteps               sync.RWMutex
}

// FindRunbookStepDetailsById calls FindRunbookStepDetailsByIdFunc.
func (mock *RunbookStepDetailsFinderMock) FindRunbookStepDetailsById(id string) (model.RunbookStepData, *model.Markdown, error) {
	if mock.FindRunbookStepDetailsByIdFunc == nil {
		panic("RunbookStepDetailsFinderMock.FindRunbookStepDetailsByIdFunc: method is nil but RunbookStepDetailsFinder.FindRunbookStepDetailsById was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockFindRunbookStepDetailsById.Lock()
	mock.calls.FindRunbookStepDetailsById = append(mock.calls.FindRunbookStepDetailsById, callInfo)
	mock.lockFindRunbookStepDetailsById.Unlock()
	return mock.FindRunbookStepDetailsByIdFunc(id)
}

// FindRunbookStepDetailsByIdCalls gets all the calls that were made to FindRunbookStepDetailsById.
// Check the length with:
//     len(mockedRunbookStepDetailsFinder.FindRunbookStepDetailsByIdCalls())
func (mock *RunbookStepDetailsFinderMock) FindRunbookStepDetailsByIdCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockFindRunbookStepDetailsById.RLock()
	calls = mock.calls.FindRunbookStepDetailsById
	mock.lockFindRunbookStepDetailsById.RUnlock()
	return calls
}

// ListAllSteps calls ListAllStepsFunc.
func (mock *RunbookStepDetailsFinderMock) ListAllSteps() ([]model.RunbookStepData, error) {
	if mock.ListAllStepsFunc == nil {
		panic("RunbookStepDetailsFinderMock.ListAllStepsFunc: method is nil but RunbookStepDetailsFinder.ListAllSteps was just called")
	}
	callInfo := struct {
	}{}
	mock.lockListAllSteps.Lock()
	mock.calls.ListAllSteps = append(mock.calls.ListAllSteps, callInfo)
	mock.lockListAllSteps.Unlock()
	return mock.ListAllStepsFunc()
}

// ListAllStepsCalls gets all the calls that were made to ListAllSteps.
// Check the length with:
//     len(mockedRunbookStepDetailsFinder.ListAllStepsCalls())
func (mock *RunbookStepDetailsFinderMock) ListAllStepsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockListAllSteps.RLock()
	calls = mock.calls.ListAllSteps
	mock.lockListAllSteps.RUnlock()
	return calls
}

// RunbookStepWriterMock is a mock implementation of RunbookStepWriter.
//
// 	func TestSomethingThatUsesRunbookStepWriter(t *testing.T) {
//
// 		// make and configure a mocked RunbookStepWriter
// 		mockedRunbookStepWriter := &RunbookStepWriterMock{
// 			DeleteStepDetailsFunc: func(id string) error {
// 				panic("mock out the DeleteStepDetails method")
// 			},
// 			WriteRunbookStepDetailsFunc: func(data model.RunbookStepData, markdown *model.Markdown, markdownLocationType string) (string, error) {
// 				panic("mock out the WriteRunbookStepDetails method")
// 			},
// 		}
//
// 		// use mockedRunbookStepWriter in code that requires RunbookStepWriter
// 		// and then make assertions.
//
// 	}
type RunbookStepWriterMock struct {
	// DeleteStepDetailsFunc mocks the DeleteStepDetails method.
	DeleteStepDetailsFunc func(id string) error

	// WriteRunbookStepDetailsFunc mocks the WriteRunbookStepDetails method.
	WriteRunbookStepDetailsFunc func(data model.RunbookStepData, markdown *model.Markdown, markdownLocationType string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeleteStepDetails holds details about calls to the DeleteStepDetails method.
		DeleteStepDetails []struct {
			// ID is the id argument value.
			ID string
		}
		// WriteRunbookStepDetails holds details about calls to the WriteRunbookStepDetails method.
		WriteRunbookStepDetails []struct {
			// Data is the data argument value.
			Data model.RunbookStepData
			// Markdown is the markdown argument value.
			Markdown *model.Markdown
			// MarkdownLocationType is the markdownLocationType argument value.
			MarkdownLocationType string
		}
	}
	lockDeleteStepDetails       sync.RWMutex
	lockWriteRunbookStepDetails sync.RWMutex
}

// DeleteStepDetails calls DeleteStepDetailsFunc.
func (mock *RunbookStepWriterMock) DeleteStepDetails(id string) error {
	if mock.DeleteStepDetailsFunc == nil {
		panic("RunbookStepWriterMock.DeleteStepDetailsFunc: method is nil but RunbookStepWriter.DeleteStepDetails was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockDeleteStepDetails.Lock()
	mock.calls.DeleteStepDetails = append(mock.calls.DeleteStepDetails, callInfo)
	mock.lockDeleteStepDetails.Unlock()
	return mock.DeleteStepDetailsFunc(id)
}

// DeleteStepDetailsCalls gets all the calls that were made to DeleteStepDetails.
// Check the length with:
//     len(mockedRunbookStepWriter.DeleteStepDetailsCalls())
func (mock *RunbookStepWriterMock) DeleteStepDetailsCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockDeleteStepDetails.RLock()
	calls = mock.calls.DeleteStepDetails
	mock.lockDeleteStepDetails.RUnlock()
	return calls
}

// WriteRunbookStepDetails calls WriteRunbookStepDetailsFunc.
func (mock *RunbookStepWriterMock) WriteRunbookStepDetails(data model.RunbookStepData, markdown *model.Markdown, markdownLocationType string) (string, error) {
	if mock.WriteRunbookStepDetailsFunc == nil {
		panic("RunbookStepWriterMock.WriteRunbookStepDetailsFunc: method is nil but RunbookStepWriter.WriteRunbookStepDetails was just called")
	}
	callInfo := struct {
		Data                 model.RunbookStepData
		Markdown             *model.Markdown
		MarkdownLocationType string
	}{
		Data:                 data,
		Markdown:             markdown,
		MarkdownLocationType: markdownLocationType,
	}
	mock.lockWriteRunbookStepDetails.Lock()
	mock.calls.WriteRunbookStepDetails = append(mock.calls.WriteRunbookStepDetails, callInfo)
	mock.lockWriteRunbookStepDetails.Unlock()
	return mock.WriteRunbookStepDetailsFunc(data, markdown, markdownLocationType)
}

// WriteRunbookStepDetailsCalls gets all the calls that were made to WriteRunbookStepDetails.
// Check the length with:
//     len(mockedRunbookStepWriter.WriteRunbookStepDetailsCalls())
func (mock *RunbookStepWriterMock) WriteRunbookStepDetailsCalls() []struct {
	Data                 model.RunbookStepData
	Markdown             *model.Markdown
	MarkdownLocationType string
} {
	var calls []struct {
		Data                 model.RunbookStepData
		Markdown             *model.Markdown
		MarkdownLocationType string
	}
	mock.lockWriteRunbookStepDetails.RLock()
	calls = mock.calls.WriteRunbookStepDetails
	mock.lockWriteRunbookStepDetails.RUnlock()
	return calls
}
