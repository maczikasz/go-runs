// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handlers

import (
	"github.com/maczikasz/go-runs/internal/model"
	"sync"
)

// RuleSaverMock is a mock implementation of RuleSaver.
//
// 	func TestSomethingThatUsesRuleSaver(t *testing.T) {
//
// 		// make and configure a mocked RuleSaver
// 		mockedRuleSaver := &RuleSaverMock{
// 			DeleteRuleFunc: func(ruleId string) error {
// 				panic("mock out the DeleteRule method")
// 			},
// 			WriteRuleFunc: func(ruleType string, matcherType string, ruleContent string, runbookId string) error {
// 				panic("mock out the WriteRule method")
// 			},
// 		}
//
// 		// use mockedRuleSaver in code that requires RuleSaver
// 		// and then make assertions.
//
// 	}
type RuleSaverMock struct {
	// DeleteRuleFunc mocks the DeleteRule method.
	DeleteRuleFunc func(ruleId string) error

	// WriteRuleFunc mocks the WriteRule method.
	WriteRuleFunc func(ruleType string, matcherType string, ruleContent string, runbookId string) error

	// calls tracks calls to the methods.
	calls struct {
		// DeleteRule holds details about calls to the DeleteRule method.
		DeleteRule []struct {
			// RuleId is the ruleId argument value.
			RuleId string
		}
		// WriteRule holds details about calls to the WriteRule method.
		WriteRule []struct {
			// RuleType is the ruleType argument value.
			RuleType string
			// MatcherType is the matcherType argument value.
			MatcherType string
			// RuleContent is the ruleContent argument value.
			RuleContent string
			// RunbookId is the runbookId argument value.
			RunbookId string
		}
	}
	lockDeleteRule sync.RWMutex
	lockWriteRule  sync.RWMutex
}

// DeleteRule calls DeleteRuleFunc.
func (mock *RuleSaverMock) DeleteRule(ruleId string) error {
	if mock.DeleteRuleFunc == nil {
		panic("RuleSaverMock.DeleteRuleFunc: method is nil but RuleSaver.DeleteRule was just called")
	}
	callInfo := struct {
		RuleId string
	}{
		RuleId: ruleId,
	}
	mock.lockDeleteRule.Lock()
	mock.calls.DeleteRule = append(mock.calls.DeleteRule, callInfo)
	mock.lockDeleteRule.Unlock()
	return mock.DeleteRuleFunc(ruleId)
}

// DeleteRuleCalls gets all the calls that were made to DeleteRule.
// Check the length with:
//     len(mockedRuleSaver.DeleteRuleCalls())
func (mock *RuleSaverMock) DeleteRuleCalls() []struct {
	RuleId string
} {
	var calls []struct {
		RuleId string
	}
	mock.lockDeleteRule.RLock()
	calls = mock.calls.DeleteRule
	mock.lockDeleteRule.RUnlock()
	return calls
}

// WriteRule calls WriteRuleFunc.
func (mock *RuleSaverMock) WriteRule(ruleType string, matcherType string, ruleContent string, runbookId string) error {
	if mock.WriteRuleFunc == nil {
		panic("RuleSaverMock.WriteRuleFunc: method is nil but RuleSaver.WriteRule was just called")
	}
	callInfo := struct {
		RuleType    string
		MatcherType string
		RuleContent string
		RunbookId   string
	}{
		RuleType:    ruleType,
		MatcherType: matcherType,
		RuleContent: ruleContent,
		RunbookId:   runbookId,
	}
	mock.lockWriteRule.Lock()
	mock.calls.WriteRule = append(mock.calls.WriteRule, callInfo)
	mock.lockWriteRule.Unlock()
	return mock.WriteRuleFunc(ruleType, matcherType, ruleContent, runbookId)
}

// WriteRuleCalls gets all the calls that were made to WriteRule.
// Check the length with:
//     len(mockedRuleSaver.WriteRuleCalls())
func (mock *RuleSaverMock) WriteRuleCalls() []struct {
	RuleType    string
	MatcherType string
	RuleContent string
	RunbookId   string
} {
	var calls []struct {
		RuleType    string
		MatcherType string
		RuleContent string
		RunbookId   string
	}
	mock.lockWriteRule.RLock()
	calls = mock.calls.WriteRule
	mock.lockWriteRule.RUnlock()
	return calls
}

// RuleFinderMock is a mock implementation of RuleFinder.
//
// 	func TestSomethingThatUsesRuleFinder(t *testing.T) {
//
// 		// make and configure a mocked RuleFinder
// 		mockedRuleFinder := &RuleFinderMock{
// 			FindOneRuleFunc: func(ruleType string, matcherType string, ruleContent string) (*model.RuleEntity, error) {
// 				panic("mock out the FindOneRule method")
// 			},
// 			ListRulesFunc: func() (*[]model.RuleEntity, error) {
// 				panic("mock out the ListRules method")
// 			},
// 		}
//
// 		// use mockedRuleFinder in code that requires RuleFinder
// 		// and then make assertions.
//
// 	}
type RuleFinderMock struct {
	// FindOneRuleFunc mocks the FindOneRule method.
	FindOneRuleFunc func(ruleType string, matcherType string, ruleContent string) (*model.RuleEntity, error)

	// ListRulesFunc mocks the ListRules method.
	ListRulesFunc func() (*[]model.RuleEntity, error)

	// calls tracks calls to the methods.
	calls struct {
		// FindOneRule holds details about calls to the FindOneRule method.
		FindOneRule []struct {
			// RuleType is the ruleType argument value.
			RuleType string
			// MatcherType is the matcherType argument value.
			MatcherType string
			// RuleContent is the ruleContent argument value.
			RuleContent string
		}
		// ListRules holds details about calls to the ListRules method.
		ListRules []struct {
		}
	}
	lockFindOneRule sync.RWMutex
	lockListRules   sync.RWMutex
}

// FindOneRule calls FindOneRuleFunc.
func (mock *RuleFinderMock) FindOneRule(ruleType string, matcherType string, ruleContent string) (*model.RuleEntity, error) {
	if mock.FindOneRuleFunc == nil {
		panic("RuleFinderMock.FindOneRuleFunc: method is nil but RuleFinder.FindOneRule was just called")
	}
	callInfo := struct {
		RuleType    string
		MatcherType string
		RuleContent string
	}{
		RuleType:    ruleType,
		MatcherType: matcherType,
		RuleContent: ruleContent,
	}
	mock.lockFindOneRule.Lock()
	mock.calls.FindOneRule = append(mock.calls.FindOneRule, callInfo)
	mock.lockFindOneRule.Unlock()
	return mock.FindOneRuleFunc(ruleType, matcherType, ruleContent)
}

// FindOneRuleCalls gets all the calls that were made to FindOneRule.
// Check the length with:
//     len(mockedRuleFinder.FindOneRuleCalls())
func (mock *RuleFinderMock) FindOneRuleCalls() []struct {
	RuleType    string
	MatcherType string
	RuleContent string
} {
	var calls []struct {
		RuleType    string
		MatcherType string
		RuleContent string
	}
	mock.lockFindOneRule.RLock()
	calls = mock.calls.FindOneRule
	mock.lockFindOneRule.RUnlock()
	return calls
}

// ListRules calls ListRulesFunc.
func (mock *RuleFinderMock) ListRules() (*[]model.RuleEntity, error) {
	if mock.ListRulesFunc == nil {
		panic("RuleFinderMock.ListRulesFunc: method is nil but RuleFinder.ListRules was just called")
	}
	callInfo := struct {
	}{}
	mock.lockListRules.Lock()
	mock.calls.ListRules = append(mock.calls.ListRules, callInfo)
	mock.lockListRules.Unlock()
	return mock.ListRulesFunc()
}

// ListRulesCalls gets all the calls that were made to ListRules.
// Check the length with:
//     len(mockedRuleFinder.ListRulesCalls())
func (mock *RuleFinderMock) ListRulesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockListRules.RLock()
	calls = mock.calls.ListRules
	mock.lockListRules.RUnlock()
	return calls
}
