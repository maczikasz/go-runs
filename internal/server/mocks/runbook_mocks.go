// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package server

import (
	"github.com/maczikasz/go-runs/internal/model"
	"sync"
)

// RunbookStepDetailsFinderMock is a mock implementation of RunbookStepDetailsFinder.
//
// 	func TestSomethingThatUsesRunbookStepDetailsFinder(t *testing.T) {
//
// 		// make and configure a mocked RunbookStepDetailsFinder
// 		mockedRunbookStepDetailsFinder := &RunbookStepDetailsFinderMock{
// 			FindRunbookStepDetailsByIdFunc: func(id string) (model.RunbookStepDetails, error) {
// 				panic("mock out the FindRunbookStepEntityById method")
// 			},
// 		}
//
// 		// use mockedRunbookStepDetailsFinder in code that requires RunbookStepDetailsFinder
// 		// and then make assertions.
//
// 	}
type RunbookStepDetailsFinderMock struct {
	// FindRunbookStepDetailsByIdFunc mocks the FindRunbookStepEntityById method.
	FindRunbookStepDetailsByIdFunc func(id string) (model.RunbookStepDetails, error)

	// calls tracks calls to the methods.
	calls struct {
		// FindRunbookStepEntityById holds details about calls to the FindRunbookStepEntityById method.
		FindRunbookStepDetailsById []struct {
			// ID is the id argument value.
			ID string
		}
	}
	lockFindRunbookStepDetailsById sync.RWMutex
}

// FindRunbookStepEntityById calls FindRunbookStepDetailsByIdFunc.
func (mock *RunbookStepDetailsFinderMock) FindRunbookStepDetailsById(id string) (model.RunbookStepDetails, error) {
	if mock.FindRunbookStepDetailsByIdFunc == nil {
		panic("RunbookStepDetailsFinderMock.FindRunbookStepDetailsByIdFunc: method is nil but RunbookStepDetailsFinder.FindRunbookStepEntityById was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockFindRunbookStepDetailsById.Lock()
	mock.calls.FindRunbookStepDetailsById = append(mock.calls.FindRunbookStepDetailsById, callInfo)
	mock.lockFindRunbookStepDetailsById.Unlock()
	return mock.FindRunbookStepDetailsByIdFunc(id)
}

// FindRunbookStepDetailsByIdCalls gets all the calls that were made to FindRunbookStepEntityById.
// Check the length with:
//     len(mockedRunbookStepDetailsFinder.FindRunbookStepDetailsByIdCalls())
func (mock *RunbookStepDetailsFinderMock) FindRunbookStepDetailsByIdCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockFindRunbookStepDetailsById.RLock()
	calls = mock.calls.FindRunbookStepDetailsById
	mock.lockFindRunbookStepDetailsById.RUnlock()
	return calls
}

// RunbookDetailsFinderMock is a mock implementation of RunbookDetailsFinder.
//
// 	func TestSomethingThatUsesRunbookDetailsFinder(t *testing.T) {
//
// 		// make and configure a mocked RunbookDetailsFinder
// 		mockedRunbookDetailsFinder := &RunbookDetailsFinderMock{
// 			FindRunbookDetailsByIdFunc: func(id string) (model.RunbookDetails, error) {
// 				panic("mock out the FindRunbookDetailsById method")
// 			},
// 		}
//
// 		// use mockedRunbookDetailsFinder in code that requires RunbookDetailsFinder
// 		// and then make assertions.
//
// 	}
type RunbookDetailsFinderMock struct {
	// FindRunbookDetailsByIdFunc mocks the FindRunbookDetailsById method.
	FindRunbookDetailsByIdFunc func(id string) (model.RunbookDetails, error)

	// calls tracks calls to the methods.
	calls struct {
		// FindRunbookDetailsById holds details about calls to the FindRunbookDetailsById method.
		FindRunbookDetailsById []struct {
			// ID is the id argument value.
			ID string
		}
	}
	lockFindRunbookDetailsById sync.RWMutex
}

// FindRunbookDetailsById calls FindRunbookDetailsByIdFunc.
func (mock *RunbookDetailsFinderMock) FindRunbookDetailsById(id string) (model.RunbookDetails, error) {
	if mock.FindRunbookDetailsByIdFunc == nil {
		panic("RunbookDetailsFinderMock.FindRunbookDetailsByIdFunc: method is nil but RunbookDetailsFinder.FindRunbookDetailsById was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockFindRunbookDetailsById.Lock()
	mock.calls.FindRunbookDetailsById = append(mock.calls.FindRunbookDetailsById, callInfo)
	mock.lockFindRunbookDetailsById.Unlock()
	return mock.FindRunbookDetailsByIdFunc(id)
}

// FindRunbookDetailsByIdCalls gets all the calls that were made to FindRunbookDetailsById.
// Check the length with:
//     len(mockedRunbookDetailsFinder.FindRunbookDetailsByIdCalls())
func (mock *RunbookDetailsFinderMock) FindRunbookDetailsByIdCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockFindRunbookDetailsById.RLock()
	calls = mock.calls.FindRunbookDetailsById
	mock.lockFindRunbookDetailsById.RUnlock()
	return calls
}
