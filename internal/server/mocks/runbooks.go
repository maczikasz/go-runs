// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handlers

import (
	"github.com/maczikasz/go-runs/internal/model"
	"sync"
)

// RunbookDetailsWriterMock is a mock implementation of RunbookDetailsWriter.
//
// 	func TestSomethingThatUsesRunbookDetailsWriter(t *testing.T) {
//
// 		// make and configure a mocked RunbookDetailsWriter
// 		mockedRunbookDetailsWriter := &RunbookDetailsWriterMock{
// 			CreateRunbookFromStepIdsFunc: func(steps []string) (string, error) {
// 				panic("mock out the CreateRunbookFromStepIds method")
// 			},
// 		}
//
// 		// use mockedRunbookDetailsWriter in code that requires RunbookDetailsWriter
// 		// and then make assertions.
//
// 	}
type RunbookDetailsWriterMock struct {
	// CreateRunbookFromStepIdsFunc mocks the CreateRunbookFromStepIds method.
	CreateRunbookFromStepIdsFunc func(steps []string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateRunbookFromStepIds holds details about calls to the CreateRunbookFromStepIds method.
		CreateRunbookFromStepIds []struct {
			// Steps is the steps argument value.
			Steps []string
		}
	}
	lockCreateRunbookFromStepIds sync.RWMutex
}

// CreateRunbookFromStepIds calls CreateRunbookFromStepIdsFunc.
func (mock *RunbookDetailsWriterMock) CreateRunbookFromStepIds(steps []string) (string, error) {
	if mock.CreateRunbookFromStepIdsFunc == nil {
		panic("RunbookDetailsWriterMock.CreateRunbookFromStepIdsFunc: method is nil but RunbookDetailsWriter.CreateRunbookFromStepIds was just called")
	}
	callInfo := struct {
		Steps []string
	}{
		Steps: steps,
	}
	mock.lockCreateRunbookFromStepIds.Lock()
	mock.calls.CreateRunbookFromStepIds = append(mock.calls.CreateRunbookFromStepIds, callInfo)
	mock.lockCreateRunbookFromStepIds.Unlock()
	return mock.CreateRunbookFromStepIdsFunc(steps)
}

// CreateRunbookFromStepIdsCalls gets all the calls that were made to CreateRunbookFromStepIds.
// Check the length with:
//     len(mockedRunbookDetailsWriter.CreateRunbookFromStepIdsCalls())
func (mock *RunbookDetailsWriterMock) CreateRunbookFromStepIdsCalls() []struct {
	Steps []string
} {
	var calls []struct {
		Steps []string
	}
	mock.lockCreateRunbookFromStepIds.RLock()
	calls = mock.calls.CreateRunbookFromStepIds
	mock.lockCreateRunbookFromStepIds.RUnlock()
	return calls
}

// RunbookDetailsFinderMock is a mock implementation of RunbookDetailsFinder.
//
// 	func TestSomethingThatUsesRunbookDetailsFinder(t *testing.T) {
//
// 		// make and configure a mocked RunbookDetailsFinder
// 		mockedRunbookDetailsFinder := &RunbookDetailsFinderMock{
// 			FindRunbookDetailsByIdFunc: func(id string) (model.RunbookDetails, error) {
// 				panic("mock out the FindRunbookDetailsById method")
// 			},
// 		}
//
// 		// use mockedRunbookDetailsFinder in code that requires RunbookDetailsFinder
// 		// and then make assertions.
//
// 	}
type RunbookDetailsFinderMock struct {
	// FindRunbookDetailsByIdFunc mocks the FindRunbookDetailsById method.
	FindRunbookDetailsByIdFunc func(id string) (model.RunbookDetails, error)

	// calls tracks calls to the methods.
	calls struct {
		// FindRunbookDetailsById holds details about calls to the FindRunbookDetailsById method.
		FindRunbookDetailsById []struct {
			// ID is the id argument value.
			ID string
		}
	}
	lockFindRunbookDetailsById sync.RWMutex
}

// FindRunbookDetailsById calls FindRunbookDetailsByIdFunc.
func (mock *RunbookDetailsFinderMock) FindRunbookDetailsById(id string) (model.RunbookDetails, error) {
	if mock.FindRunbookDetailsByIdFunc == nil {
		panic("RunbookDetailsFinderMock.FindRunbookDetailsByIdFunc: method is nil but RunbookDetailsFinder.FindRunbookDetailsById was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockFindRunbookDetailsById.Lock()
	mock.calls.FindRunbookDetailsById = append(mock.calls.FindRunbookDetailsById, callInfo)
	mock.lockFindRunbookDetailsById.Unlock()
	return mock.FindRunbookDetailsByIdFunc(id)
}

// FindRunbookDetailsByIdCalls gets all the calls that were made to FindRunbookDetailsById.
// Check the length with:
//     len(mockedRunbookDetailsFinder.FindRunbookDetailsByIdCalls())
func (mock *RunbookDetailsFinderMock) FindRunbookDetailsByIdCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockFindRunbookDetailsById.RLock()
	calls = mock.calls.FindRunbookDetailsById
	mock.lockFindRunbookDetailsById.RUnlock()
	return calls
}
